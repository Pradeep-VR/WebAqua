<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\prade\AppData\Local\Temp\tmp91DE.tmp.cadir\bin\App_Code.dll">
   <Modules>
    <Module Name="app_code.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="RawPrinterHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ClosePrinter(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.ClosePrinter(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.ClosePrinter(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EndDocPrinter(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.EndDocPrinter(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.EndDocPrinter(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EndPagePrinter(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.EndPagePrinter(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.EndPagePrinter(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenPrinter(System.String,System.IntPtr&amp;,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.OpenPrinter(string, out IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.OpenPrinter(string, out IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'szPrinter' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendFileToPrinter(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="RawPrinterHelper.cs" Line="116">Object 'fs' can be disposed more than once in method 'RawPrinterHelper.SendFileToPrinter(string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 116</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartDocPrinter(System.IntPtr,System.Int32,RawPrinterHelper+DOCINFOA)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.StartDocPrinter(IntPtr, int, RawPrinterHelper.DOCINFOA)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.StartDocPrinter(IntPtr, int, RawPrinterHelper.DOCINFOA)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="DOCINFOA.pDataType" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Name="FieldImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal field 'RawPrinterHelper.DOCINFOA.pDataType' as Unicode, by setting StructLayout.CharSet on 'RawPrinterHelper.DOCINFOA' to CharSet.Unicode, or by explicitly marshaling the field as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, use the BestFitMapping attribute to turn best-fit mapping off, and for added security, to turn ThrowOnUnmappableChar on.</Issue>
            </Message>
            <Message Id="DOCINFOA.pDocName" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Name="FieldImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal field 'RawPrinterHelper.DOCINFOA.pDocName' as Unicode, by setting StructLayout.CharSet on 'RawPrinterHelper.DOCINFOA' to CharSet.Unicode, or by explicitly marshaling the field as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, use the BestFitMapping attribute to turn best-fit mapping off, and for added security, to turn ThrowOnUnmappableChar on.</Issue>
            </Message>
            <Message Id="DOCINFOA.pOutputFile" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Name="FieldImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal field 'RawPrinterHelper.DOCINFOA.pOutputFile' as Unicode, by setting StructLayout.CharSet on 'RawPrinterHelper.DOCINFOA' to CharSet.Unicode, or by explicitly marshaling the field as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, use the BestFitMapping attribute to turn best-fit mapping off, and for added security, to turn ThrowOnUnmappableChar on.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartPagePrinter(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.StartPagePrinter(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.StartPagePrinter(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WritePrinter(System.IntPtr,System.IntPtr,System.Int32,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'RawPrinterHelper.WritePrinter(IntPtr, IntPtr, int, out int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'RawPrinterHelper.WritePrinter(IntPtr, IntPtr, int, out int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="AQUA">
       <Types>
        <Type Name="AQUAObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'AQUAObject' because it creates members of the following IDisposable types: 'DataServerSync'. If 'AQUAObject' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DataServer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="adap" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="88">'DataServer' contains field 'DataServer.adap' that is of IDisposable type: 'SqlDataAdapter'. Change the Dispose method on 'DataServer' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="comm" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="88">'DataServer' contains field 'DataServer.comm' that is of IDisposable type: 'SqlCommand'. Change the Dispose method on 'DataServer' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="commTans" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="88">'DataServer' contains field 'DataServer.commTans' that is of IDisposable type: 'SqlCommand'. Change the Dispose method on 'DataServer' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="con" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="88">'DataServer' contains field 'DataServer.con' that is of IDisposable type: 'SqlConnection'. Change the Dispose method on 'DataServer' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteNonQuery(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="334">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.ExecuteNonQuery(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteNonQueryWithTrans(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="602">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection, SqlTransaction)' in 'DataServer.ExecuteNonQueryWithTrans(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteScalar(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="370">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.ExecuteScalar(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteScalarwithTrans(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="645">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection, SqlTransaction)' in 'DataServer.ExecuteScalarwithTrans(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSP(System.Collections.Generic.List`1&lt;System.Data.SqlClient.SqlParameter&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="413">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.ExecuteSP(List&lt;SqlParameter&gt;, string)' could contain the following variables 'spName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSP`1(System.Collections.Generic.List`1&lt;System.Data.SqlClient.SqlParameter&gt;,System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Object&gt;&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="488">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.ExecuteSP&lt;T&gt;(List&lt;SqlParameter&gt;, string, string, out Dictionary&lt;string, object&gt;)' could contain the following variables 'spName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataset(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="152">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.GetDataset(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDatasetDispatch(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="201">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.GetDatasetDispatch(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataTable(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="252">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.GetDataTable(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataTableDispatch(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="292">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.GetDataTableDispatch(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataTableTrans(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="624">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection, SqlTransaction)' in 'DataServer.GetDataTableTrans(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Transaction(System.Collections.Generic.List`1&lt;System.String&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerAsync.cs" Line="559">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServer.Transaction(List&lt;string&gt;)' could contain the following variables 'qry'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DataServerSync" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="adap" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="74">'DataServerSync' contains field 'DataServerSync.adap' that is of IDisposable type: 'SqlDataAdapter'. Change the Dispose method on 'DataServerSync' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="comm" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="74">'DataServerSync' contains field 'DataServerSync.comm' that is of IDisposable type: 'SqlCommand'. Change the Dispose method on 'DataServerSync' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="con" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="74">'DataServerSync' contains field 'DataServerSync.con' that is of IDisposable type: 'SqlConnection'. Change the Dispose method on 'DataServerSync' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteNonQuery(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="175">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.ExecuteNonQuery(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteScalar(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="198">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.ExecuteScalar(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSP(System.Collections.Generic.List`1&lt;System.Data.SqlClient.SqlParameter&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="222">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.ExecuteSP(List&lt;SqlParameter&gt;, string)' could contain the following variables 'spName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSP(System.Collections.Generic.List`1&lt;System.Data.SqlClient.SqlParameter&gt;,System.String,AQUA.SPCommand)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="326">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.ExecuteSP(List&lt;SqlParameter&gt;, string, SPCommand)' could contain the following variables 'spName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSP`1(System.Collections.Generic.List`1&lt;System.Data.SqlClient.SqlParameter&gt;,System.String,AQUA.SPCommand,System.Collections.Generic.Dictionary`2&lt;System.String,System.Object&gt;&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="390">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.ExecuteSP&lt;T&gt;(List&lt;SqlParameter&gt;, string, SPCommand, out Dictionary&lt;string, object&gt;)' could contain the following variables 'spName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSP1(System.Collections.Generic.List`1&lt;System.Data.SqlClient.SqlParameter&gt;,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="261">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.ExecuteSP1(List&lt;SqlParameter&gt;, string, string)' could contain the following variables 'spName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataset(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="130">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.GetDataset(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataTable(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="152">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.GetDataTable(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Transaction(System.Collections.Generic.List`1&lt;System.String&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="DataServerSync.cs" Line="505">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DataServerSync.Transaction(List&lt;string&gt;)' could contain the following variables 'qry'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Utils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LogError(System.String,System.Web.HttpRequest,AQUA.Utils+LogEntry)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="Utils.cs" Line="140">Object 'w' can be disposed more than once in method 'Utils.LogError(string, HttpRequest, Utils.LogEntry)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 140</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEmail(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\AQUA_Source\22-07-23\AQUAWEB\App_Code" File="Utils.cs" Line="325">'Utils.SendEmail(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\prade\AppData\Local\Temp\tmp91DE.tmp.cadir\bin\App_Web_3r1zsu2y.dll">
   <Modules>
    <Module Name="app_web_3r1zsu2y.dll">
     <Namespaces>
      <Namespace Name="AQUA">
       <Types>
        <Type Name="PackingBlock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PrintLabel(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB" File="PackingBlock.aspx.cs" Line="574">Object 'readprn' can be disposed more than once in method 'PackingBlock.PrintLabel(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 574</Issue>
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB" File="PackingBlock.aspx.cs" Line="577">Object 'wr' can be disposed more than once in method 'PackingBlock.PrintLabel(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 577</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\prade\AppData\Local\Temp\tmp91DE.tmp.cadir\bin\App_Web_4bssa1o0.dll">
   <Modules>
    <Module Name="app_web_4bssa1o0.dll">
     <Namespaces>
      <Namespace Name="AQUA">
       <Types>
        <Type Name="Login" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LgnBtn_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB" File="Login.aspx.cs" Line="223">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'Login.LgnBtn_Click(object, EventArgs)' could contain the following variables 'this.txtUserName.Text', 'enpass'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\prade\AppData\Local\Temp\tmp91DE.tmp.cadir\bin\App_Web_hk4zzc2u.dll">
   <Modules>
    <Module Name="app_web_hk4zzc2u.dll">
     <Namespaces>
      <Namespace Name="AQUA">
       <Types>
        <Type Name="PackingBlock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PrintLabel(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB" File="PackingBlock.aspx.cs" Line="574">Object 'readprn' can be disposed more than once in method 'PackingBlock.PrintLabel(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 574</Issue>
             <Issue Certainty="75" Level="Warning" Path="e:\AQUA_Source\22-07-23\AQUAWEB" File="PackingBlock.aspx.cs" Line="577">Object 'wr' can be disposed more than once in method 'PackingBlock.PrintLabel(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 577</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\prade\AppData\Local\Temp\tmp91DE.tmp.cadir\bin\App_Web_rjzhh5ll.dll">
   <Modules>
    <Module Name="app_web_rjzhh5ll.dll">
     <Namespaces>
      <Namespace Name="AQUA">
       <Types>
        <Type Name="QualityEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EmailSend()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-07-27 05:04:25Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\AQUA_Source\22-07-23\AQUAWEB" File="QualityEntry.aspx.cs" Line="538">'QualityEntry.EmailSend()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 577</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="FieldImplicitAnsi">To reduce security risk, marshal field {0} as Unicode, by setting StructLayout.CharSet on {1} to CharSet.Unicode, or by explicitly marshaling the field as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, use the BestFitMapping attribute to turn best-fit mapping off, and for added security, to turn ThrowOnUnmappableChar on.</Resolution>
   <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
